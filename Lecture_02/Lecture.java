// import java.io.File;


/* Что такое API
 * API(Application programming interface) - это контракт, который предоставляет программа.
 * "Ко мне нужно обращаться так и так, я обязуюсь делать то и это"
 * Для разработчиков - это возможности, который предоставляеют разработчики языка для удобного 
 * взаимодействия с его функционалом.
 * Что такое API для нас: строки
 * String - много изменений
 * concat(): объединение строк
    valueOf(): преобразует Object в строковое представление (завязан на toString())
    join(): объединяет набор строк в одну с учетом разделителя
    charAt(): получение символа по индексу
    indexOf(): первый индекс вхождения подстроки
    lastIndexOf(): последний индекс вхождения подстроки
    startsWith()/endsWith(): определяет, начинается/заканчивается ли строка с подстроки
    replace(): замена одной подстроки на другую
    ------------------------------------------------------------------------------------------------
    StringBuilder - много преобразований
    trim(): удаляет начальные и конечные пробелы
    substring(): возвращает подстроку, см.аргументы
    toLowerCase()/toUpperCase(): возвращает новую строку в нижнем/верхнем регистре
    сompareTo(): сравнивает две строки
    equals(): сравнивает строки с учетом регистра
    equalsIgnoreCase(): сравнивает строки без учета регистра
    regionMatches(): сравнивает подстроки в строках
 */
/*
 * Работа с файловой системой
 * Для работы нужно:
    File <имя> = new File(<полный путь к файлу>);
    File f1 = new File("file.txt");
    File f2 = new File("/Users/sk/vscode/java_projects/file.txt");
 * Работа с файловой системой. Файлы. Ошибки
 * try {
    Код, в котором может появиться ошибка
}   catch (Exception e) {
    Обработка, если ошибка случилась
}
finally {
    Код, который выполнится в любом случае
}
 * Работа с файловой системой
 * isHidden(): возвращает истину, если каталог или файл является скрытым
    length(): возвращает размер файла в байтах
    lastModified(): возвращает время последнего изменения файла или каталога
    list(): возвращает массив файлов и подкаталогов, которые находятся в каталоге
    listFiles(): возвращает массив файлов и подкаталогов, которые находятся
    в определенном каталоге
    mkdir(): создает новый каталог
    renameTo(File dest): переименовывает файл или каталог
----------------------------------------------------------------------------------------
 * length(): возвращает размер файла в байтах
    lastModified(): возвращает время последнего изменения
    файла или каталога
    list(): возвращает массив файлов и подкаталогов, которые находятся в каталоге
    listFiles(): возвращает массив файлов и подкаталогов, которые
    находятся в определенном каталоге
    mkdir(): создает новый каталог
    renameTo(File dest): переименовывает файл или каталог
 * ---------------------------------------------------------------------------------------
 * Логирование (журналирование)
 * Использование
    Logger logger = Logger.getLogger()
    Уровни важности
    INFO, DEBUG, ERROR, WARNING и др.
    Вывод
    ConsoleHandler info = new ConsoleHandler();
    log.addHandler(info);
    Формат вывода: структурированный, абы как*
    XMLFormatter, SimpleFormatter
 *
 */



package Lecture_02;

public class Lecture {
    public static void main(String[] args) {
        String[] name = { "C", "е", "р", "г", "е", "й" };
        String sk = "СЕРГЕЙ КА.";
        System.out.println(sk.toLowerCase()); // сергей ка.
        System.out.println(String.join("", name)); // Cергей
        System.out.println(String.join("", "C", "е", "р", "г", "е", "й"));
        // C,е,р,г,е,й
        System.out.println(String.join(",", "C", "е", "р", "г", "е", "й"));
        // try {
        //     String pathProject = System.getProperty("user.dir");
        //     String pathFile = pathProject.concat("/file2.txt");
        //     File f3 = new File(pathFile);
        //     System.out.println("try");
        // } catch (Exception e) {
        //     System.out.println("catch");
        //     }
        // finally
        //     { System.out.println("finally"); }
           
    }
    
}
