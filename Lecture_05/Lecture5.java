/*
 * HashMap
 * Map – это множество коллекций, работающих с данными
    по принципу <Ключ / Значение>.
    Ключевые особенности:
    ● допускаются только уникальные ключи, значения могут повторяться;
    ● помните про null значения*;
    ● ускоренная обработка данных;
    ● порядок добавления не запоминается.
    В HashMap элементы располагаются как угодно и могут
    менять свое положение.
 * put(K,V) – добавить пару если или изменить значение,если ключ имеется.
    putIfAbsent(K,V) – произвести добавление если ключ не найден.
    get(K) - получение значения по указанному ключу.
    remove(K) – удаляет пару по указанному ключу.
    containsValue(V) – проверка наличия значения.
    containsKey(V) – проверка наличия ключа.
    keySet() – возвращает множество ключей.
    values() – возвращает набор значений.
 * ● Хэш-функции и хэш-таблицы
    ● Прямое связывание (хэширование с цепочками)
    ● Хэширование с открытой адресацией
    ● Теория графов:
    ● деревья построенные на списках
    ● бинарные деревья
    ● сбалансированные деревья
    ● *алгоритм балансировки дерева
    ● ** красно-черные деревья, деревья поиска
 * TreeMap
 * В основе данной коллекции лежат красно-чёрное деревья.
    Позволяют быстрее искать, но могут возникнуть «заминки»
    при добавлении.
 * put(K,V) 
 * get(K) 
 * remove(K)
 * descendingMap()
 * tailMap() 
 * headMap() 
 * lastEntry() 
 * firstEntry()
 *  *LinkedHashMap
 * “Старший брат” коллекции HashMap, который всё помнит…
    Помнит порядок добавления элементов ➜ более медлительный
    Map<Integer,String> linkmap = new LinkedHashMap<>();
 * HashTable
 * «Устаревший брат» коллекции HashMap,
    который не знает про null
 * 
 */

package Lecture_05;

public class Lecture5 {
    public static void main(String[] args) {
        
    }
    
}
